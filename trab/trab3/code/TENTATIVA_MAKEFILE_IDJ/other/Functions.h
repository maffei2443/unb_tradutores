#ifndef _FUNCTIONS_H_
#define _FUNCTIONS_H_

#include "Types.h"
#define STR struct
Program* make_Program_op0(GlobalStmtList* _globalStmtList);
GlobalStmtList* make_GlobalStmtList_op0(GlobalStmtList* _globalStmtList, GlobalStmt* _globalStmt);
GlobalStmtList* make_GlobalStmtList_op1(GlobalStmt* _globalStmt);
GlobalStmt* make_GlobalStmt_op0(DeclFun* _declFun);
GlobalStmt* make_GlobalStmt_op1(DefFun* _defFun, Error* _error);
GlobalStmt* make_GlobalStmt_op2(DefFun* _defFun);
GlobalStmt* make_GlobalStmt_op3(DeclVar* _declVar);
GlobalStmt* make_GlobalStmt_op4(DeclVar* _declVar, Error* _error);
GlobalStmt* make_GlobalStmt_op5(AttrVar* _attrVar);
GlobalStmt* make_GlobalStmt_op6(Block* _block);
DefFun* make_DefFun_op0(BaseType* _baseType, Id* __v_id, ParamListVoid* _paramListVoid, Block* _block);
DeclFun* make_DeclFun_op0( BaseType* _baseType, Id* __v_id, ParamListVoid* _paramListVoid);
DeclVar* make_DeclVar_op0(BaseType* _baseType, Id* __v_id,  Num* _num0,  Num* _num1);
DeclVar* make_DeclVar_op1(BaseType* _baseType, IdArr* _idArr);
IdArr* make_IdArr_op0(Id* _id,  NumId* _numId);
IdArr* make_IdArr_op1(Id* _id);
AttrVar* make_AttrVar_op0(MatAttr* _matAttr);
AttrVar* make_AttrVar_op1(IndexAttr* _indexAttr);
AttrVar* make_AttrVar_op2(SimpleAttr* _simpleAttr);
SimpleAttr* make_SimpleAttr_op0(Id* _id, Expr* _expr);
IndexAttr* make_IndexAttr_op0(Id* _id,  NumId* _numId, Expr* _expr);
MatAttr* make_MatAttr_op0(Id* _id,  NumListList* _numListList);
MatAttr* make_MatAttr_op1(Id* _id,  NumId* _numId,  NumList* _numList);
MatAttr* make_MatAttr_op2(Id* _id,  NumId* _numId0,  NumId* _numId1, Expr* _expr);
NumListList* make_NumListList_op0(NumListList* _numListList,  NumList* _numList);
NumListList* make_NumListList_op1(NumList* _numList);
NumList* make_NumList_op0(NumList* _numList, Num* _num);
NumList* make_NumList_op1(Num* _num);
NumList* make_NumList_op2(Id* _id);
Stmt* make_Stmt_op0(Expr* _expr);
Stmt* make_Stmt_op1(Id* _id, Id* __v_id1);
Stmt* make_Stmt_op2( Id* __v_id,  NumId* _numId0,  NumId* _numId1);
Stmt* make_Stmt_op3( Id* __v_id,  NumId* _numId);
Stmt* make_Stmt_op4( Id* __v_id);
Stmt* make_Stmt_op5(Expr* _expr);
Stmt* make_Stmt_op6(Call* _call);
Stmt* make_Stmt_op7(DeclVar* _declVar);
Stmt* make_Stmt_op8(AttrVar* _attrVar);
Stmt* make_Stmt_op9(FlowControl* _flowControl);
Stmt* make_Stmt_op10(Loop* _loop);
ParamListVoid* make_ParamListVoid_op0();
ParamListVoid* make_ParamListVoid_op1(ParamList* _paramList);
ParamList* make_ParamList_op0(ParamList* _paramList, Param* _param);
ParamList* make_ParamList_op1(Param* _param);
Param* make_Param_op0(BaseType* _baseType, Id* __v_id);
Param* make_Param_op1(BaseType* _baseType, Id* __v_id);
Loop* make_Loop_op0( Expr* _expr, Block* _block);
FlowControl* make_FlowControl_op0(Expr* _expr, Block* _block,  FlowControl* _flowControl);
FlowControl* make_FlowControl_op1(Expr* _expr, Block* _block0,  Block* _block1);
FlowControl* make_FlowControl_op2(Error* _error, Block* _block0,  Block* _block1);
FlowControl* make_FlowControl_op3(Expr* _expr, Error* _error, Block* _block0,  Block* _block1);
Block* make_Block_op0( StmtList* _stmtList);
Block* make_Block_op1();
StmtList* make_StmtList_op0(StmtList* _stmtList, Stmt* _stmt);
StmtList* make_StmtList_op1(Stmt* _stmt);
Expr* make_Expr_op0(AddExpr* _addExpr0, Relop* _relop, AddExpr* _addExpr1);
Expr* make_Expr_op1(AddExpr* _addExpr);
Relop* make_Relop_op0();
Relop* make_Relop_op1();
Relop* make_Relop_op2();
Relop* make_Relop_op3();
Relop* make_Relop_op4();
Relop* make_Relop_op5();
AddExpr* make_AddExpr_op0(AddExpr* _addExpr, Addop* _addop, Term* _term);
AddExpr* make_AddExpr_op1(Term* _term);
Addop* make_Addop_op0();
Addop* make_Addop_op1();
Term* make_Term_op0(Term* _term, Mulop* _mulop, Bin* _bin);
Term* make_Term_op1(Bin* _bin);
Mulop* make_Mulop_op0();
Mulop* make_Mulop_op1();
Mulop* make_Mulop_op2();
Mulop* make_Mulop_op3();
Bin* make_Bin_op0(Bin* _bin, BinLogi* _binLogi, Unary* _unary);
Bin* make_Bin_op1(Unary* _unary);
BinLogi* make_BinLogi_op0();
BinLogi* make_BinLogi_op1();
Unary* make_Unary_op0(UnaryOp* _unaryOp, Factor* _factor);
Unary* make_Unary_op1(Factor* _factor);
UnaryOp* make_UnaryOp_op0();
UnaryOp* make_UnaryOp_op1();
Factor* make_Factor_op0(Expr* _expr);
Factor* make_Factor_op1(Aux* _aux);
Factor* make_Factor_op2(Call* _call);
Factor* make_Factor_op3(Ascii* _ascii);
Aux* make_Aux_op0(Id* _id,  Expr* _expr0,  Expr* _expr1);
Aux* make_Aux_op1(Id* _id,  Expr* _expr);
Aux* make_Aux_op2(NumId* _numId);
NumId* make_NumId_op0(Num* _num);
NumId* make_NumId_op1(Id* _id);
Call* make_Call_op0(Id* _id, ArgList* _argList);
Call* make_Call_op1(Id* _id); 
ArgList* make_ArgList_op0(ArgList* _argList, Arg* _arg);
ArgList* make_ArgList_op1(Arg* _arg);
Arg* make_Arg_op0(MatArg* _matArg);
Arg* make_Arg_op1(Aux* _aux);
MatArg* make_MatArg_op0(Id* _id, NumId* _numId0, NumId* _numId1);
Ascii* make_Ascii_op0(Ascii* _ascii);
BaseType* make_BaseType_op0();
BaseType* make_BaseType_op1();
BaseType* make_BaseType_op2();
Num* make_Num_op0(float fval);
Num* make_Num_op1(int ival);

#endif